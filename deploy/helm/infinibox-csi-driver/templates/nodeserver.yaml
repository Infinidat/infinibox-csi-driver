apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Release.Name }}-node
  namespace: {{ .Release.Namespace }}
imagePullSecrets:
- name: {{ .Release.Name }}-creds
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-node
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["create", "delete", "get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["persistentvolumesclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ .Release.Name }}-node
subjects:
  - kind: ServiceAccount
    name: {{ .Release.Name }}-node
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: {{ .Release.Name }}-node
  apiGroup: rbac.authorization.k8s.io
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-node
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}-node
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-node
    spec:
      serviceAccount: {{ .Release.Name }}-node
      hostNetwork: true
      containers:  
        - name: driver
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true              
          image: {{ required "Provide the Infinibox csi driver container image." .Values.images.csidriver }}
          imagePullPolicy: Always
          env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/kubelet/plugins/infinibox.infinidat.com/csi.sock
            - name: X_CSI_MODE
              value: node
            - name: X_CSI_DEBUG
              value: "true"
            - name: BLOCK_MOUNT_DIR
              value: "/var/lib/kubelet/plugins/infinibox.infinidat.com/disks"
            - name: APP_LOG_LEVEL
              value: {{ .Values.logLevel }}
            - name: CSI_DRIVER_NAME
              value: {{ required "Provide CSI Driver Name"  .Values.csiDriverName }}
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NODE_IP_ADDRESS
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: ISCSI_INITIATOR_PREFIX
              value: {{ required "Provide Prefix for Initiator"  .Values.initiatorNamePrefix }}
            - name: ISCSI_INITIATOR_NAME
              value: {{ required "Provide Initiator name"  .Values.initiatorNamePrefix }}:$(KUBE_NODE_NAME)
          volumeMounts:
            - name: driver-path
              mountPath: /var/lib/kubelet/plugins/infinibox.infinidat.com
            - name: volumedevices-path
              mountPath: /var/lib/kubelet/plugins/kubernetes.io/csi/volumeDevices
              mountPropagation: "Bidirectional"
            - name: pods-path
              mountPath: /var/lib/kubelet/pods
              mountPropagation: "Bidirectional"
            - name: dev
              mountPath: /dev
        - name: registrar
          image: {{ required "Provide the csi node registrar sidecar container image." .Values.images.registrarsidecar }}
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - --kubelet-registration-path=/var/lib/kubelet/plugins/infinibox.infinidat.com/csi.sock
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /var/lib/kubelet/plugins/infinibox.infinidat.com/csi.sock"]
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: NODE_IP_ADDRESS
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP                  
          volumeMounts:
            - name: registration-dir
              mountPath: /registration
            - name: driver-path
              mountPath: /csi
      volumes:
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
        - name: driver-path
          hostPath:
            path: /var/lib/kubelet/plugins/infinibox.infinidat.com
            type: DirectoryOrCreate
        - name: volumedevices-path
          hostPath:
            path: /var/lib/kubelet/plugins/kubernetes.io/csi/volumeDevices
            type: DirectoryOrCreate
        - name: pods-path
          hostPath:
            path: /var/lib/kubelet/pods
            type: Directory
        - name: dev
          hostPath:
            path: /dev
            type: Directory
