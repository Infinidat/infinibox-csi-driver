##@ iSCSI Complete Example
.PHONY: setup-iscsi
setup-iscsi:  ## Deploy iscsi objects through to a restored snapshot.
	@echo -e $(_begin)
	@kubectl create ns $(_namespace) 2>&1 | egrep "created|already exists"
	@$(_make) create-iscsi-objects
	@echo -e $(_finish)

.PHONY: teardown-iscsi
teardown-iscsi:  ## Remove iscsi objects.
	@echo -e $(_begin)
	@$(_make) teardown-iscsi-objects
	@echo -e $(_finish)

##@ iSCSI
.PHONY: create-iscsi-objects
create-iscsi-objects:  ## Create all iscsi objects including a snap.
	@echo -e $(_begin)
	@echo "Errors such as 'already exists' are ignored"
	@declare -a yamls=("storage-class-iscsi.yaml"); \
	for yaml in "$${yamls[@]}"; do \
		$(_k) create -f "$$yaml" 2>&1 | grep --extended-regexp "already exists|created"; \
	done
	
	@declare -a yamls=("pvc-iscsi.yaml" "pod-app-iscsi.yaml" "pvc-iscsi-block.yaml" "pod-app-iscsi-block.yaml"); \
	for yaml in "$${yamls[@]}"; do \
		$(_k) create -f "$$yaml" 2>&1 | grep --extended-regexp "already exists|created"; \
	done
	@echo -e $(_finish)

.PHONY: teardown-iscsi-objects
teardown-iscsi-objects:  ## Remove all iscsi objects including a snap.
	@echo -e $(_begin)
	@echo "Errors such as 'not found' are ignored"
	@declare -a kinds=(	"pod"           "pvc"                 "pod"                 "pvc"                      ); \
	declare -a objects=("pod-app-iscsi" "infi-pvc-iscsi-demo" "pod-app-iscsi-block" "infi-pvc-iscsi-demo-block"); \
	for i in "$${!objects[@]}"; do \
		echo "Deleting kind [$${kinds[i]}] named [$${objects[i]}]"; \
		$(_k) delete "$${kinds[i]}" "$${objects[i]}" 2>&1 | grep --extended-regexp "deleted|not found" > /dev/null \
			|| exit 1; \
	done || exit 1
	#$(_make) teardown-iscsi-storageclass
	@echo -e $(_finish)

.PHONY: teardown-iscsi-storageclass
teardown-iscsi-storageclass:  ## Delete iscis storageclass. Use after tearing down Pods/PVCs/PVs.
	@# Deleting the storageclass early may cause a error "Api client cannot be initialized without
	@# proper secrets" when deleting PV.
	@echo -e $(_begin)
	@sleep 10 
	declare -a kinds=(  "storageclass"); \
	declare -a objects=("infi-iscsi-storageclass-demo"); \
	for i in "$${!objects[@]}"; do \
		echo "Deleting kind [$${kinds[i]}] named [$${objects[i]}]"; \
		$(_k) delete "$${kinds[i]}" "$${objects[i]}" 2>&1 | grep --extended-regexp "deleted|not found" > /dev/null \
			|| exit 1; \
	done || exit 1
	@echo -e $(_finish)

.PHONY: create-iscsi-snap-objects
create-iscsi-snap-objects:  ## Create all iscsi objects including a snap.
	@echo -e $(_begin)
	@echo "Errors such as 'already exists' are ignored"
	declare -a yamls=("volume-snapshot-class-iscsi.yaml" "volume-snapshot-iscsi.yaml" ); \
	for yaml in "$${yamls[@]}"; do \
		$(_k) create -f "$$yaml" 2>&1 | grep --extended-regexp "already exists|created"; \
	done
	@echo -e $(_finish)

.PHONY: teardown-iscsi-snap-objects
teardown-iscsi-snap-objects:  ## Remove all iscsi objects including a snap.
	@echo -e $(_begin)
	@echo "Errors such as 'not found' are ignored"
	declare -a kinds=( 	"VolumeSnapshot" 		"VolumeSnapshotClass"); \
	declare -a objects=(	"ibox-snapshot-iscsi-demo" 	"ibox-iscsi-snapshotclass"); \
	for i in "$${!objects[@]}"; do \
		echo "Deleting kind [$${kinds[i]}] named [$${objects[i]}]"; \
		$(_k) delete -n kube-system "$${kinds[i]}" "$${objects[i]}" 2>&1 | grep --extended-regexp "deleted|not found" > /dev/null \
			|| exit 1; \
	done || exit 1
	@echo -e $(_finish)
