# vim: set foldmethod=indent foldnestmax=1 foldcolumn=1:

##@ Developer Recipes
.PHONY: install-e2e-tools
install-e2e-tools: ## install e2e related binaries
	@echo -e $(_begin)
	wget https://dl.k8s.io/v1.26.0/kubernetes-test-linux-amd64.tar.gz
	tar --strip-components=3 -zxf kubernetes-test-linux-amd64.tar.gz \
		kubernetes/test/bin/e2e.test kubernetes/test/bin/ginkgo
	@echo -e $(_finish)

.PHONY: install-csi-sanity
install-csi-sanity: ## install the upstream e2e sanity test binary
	@echo -e $(_begin)
	./e2e/csi-sanity/install.sh
	@echo -e $(_finish)

.PHONY: e2e-grpc
e2e-grpc:  ## run the infinidat developed grpc e2e test
	@echo -e $(_begin)
	@echo -e kubeconfig here is ${KUBECONFIG}
	$(_GOTEST) -v ./e2e/grpc -tags e2e
	@echo -e $(_finish)

.PHONY: external-e2e
external-e2e:  ## run the upstream e2e sanity tests for a particular suite of tests
	@echo -e $(_begin)
	export _E2E_NAMESPACE=$(_E2E_NAMESPACE) \
		_E2E_POOL=$(_E2E_POOL) \
		_E2E_PROTOCOL=$(_E2E_PROTOCOL) \
		_E2E_NETWORK_SPACE=$(_E2E_NETWORK_SPACE) \
		&& ./e2e/external-e2e/run.sh
	@echo -e $(_finish)

.PHONY: e2e-csi-sanity
e2e-csi-sanity:  ## run the upstream csi-sanity tests against our gRPC endpoint
	@echo -e $(_begin)
	export _E2E_IBOX_HOSTNAME=$(_E2E_IBOX_HOSTNAME) \
		_E2E_NAMESPACE=$(_E2E_NAMESPACE) \
		_E2E_POOL=$(_E2E_POOL) \
		_E2E_PROTOCOL=$(_E2E_PROTOCOL) \
		_E2E_NETWORK_SPACE=$(_E2E_NETWORK_SPACE) \
		_E2E_IBOX_USERNAME=$(_E2E_IBOX_USERNAME) \
		_E2E_IBOX_PASSWORD=$(_E2E_IBOX_PASSWORD) \
		&& ./e2e/csi-sanity/run.sh
	@echo -e $(_finish)

.PHONY: e2e-redhat-sanity
e2e-redhat-sanity:  ## run the redhat e2e tests
	@echo -e $(_begin)
	export _E2E_NAMESPACE=$(_E2E_NAMESPACE) \
		_E2E_POOL=$(_E2E_POOL) \
		_E2E_PROTOCOL=$(_E2E_PROTOCOL) \
		_E2E_NETWORK_SPACE=$(_E2E_NETWORK_SPACE) \
		_E2E_OCP_VERSION=$(_E2E_OCP_VERSION) \
		&& ./e2e/redhat-e2e/run-container.sh
	@echo -e $(_finish)

.PHONY: e2e-treeq
e2e-treeq:  ## run the infinidat developed e2e treeq tests
	@echo -e $(_begin)
	@echo -e kubeconfig here is ${KUBECONFIG}
	STORAGECLASS=$(_LOCALDIR)/e2e/e2e-treeq/storageclass.yaml $(_GOTEST) -count=1 -v ./e2e/e2e-treeq -tags e2e
	@echo -e $(_finish)

.PHONY: e2e-nfs
e2e-nfs:  ## run the infinidat developed e2e nfs tests
	@echo -e $(_begin)
	@echo -e kubeconfig here is ${KUBECONFIG}
	STORAGECLASS=$(_LOCALDIR)/e2e/e2e-nfs/storageclass.yaml $(_GOTEST) -count=1 -v ./e2e/e2e-nfs -tags e2e
	@echo -e $(_finish)

.PHONY: e2e-iscsi
e2e-iscsi:  ## run the infinidat developed e2e iscsi tests
	@echo -e $(_begin)
	@echo -e kubeconfig here is ${KUBECONFIG}
	STORAGECLASS=$(_LOCALDIR)/e2e/e2e-iscsi/storageclass.yaml $(_GOTEST) -count=1 -v ./e2e/e2e-iscsi -tags e2e
	@echo -e $(_finish)

.PHONY: e2e-fc
e2e-fc:  ## run the infinidat developed e2e fc tests
	@echo -e $(_begin)
	@echo -e kubeconfig here is ${KUBECONFIG}
	STORAGECLASS=$(_LOCALDIR)/e2e/e2e-fc/storageclass.yaml $(_GOTEST) -count=1 -v ./e2e/e2e-fc -tags e2e
	@echo -e $(_finish)

.PHONY: csitestimage
csitestimage:  ## build the e2e test image
	@echo -e $(_begin)
	go build $(_LOCALDIR)/e2e/csitestimage/csitestimage.go
	docker build $(OPTIONAL_DOCKER_BUILD_FLAGS) -t git.infinidat.com:4567/host-opensource/infinidat-csi-driver/csitestimage:latest -f $(_LOCALDIR)/e2e/csitestimage/Dockerfile .
	docker push git.infinidat.com:4567/host-opensource/infinidat-csi-driver/csitestimage:latest 
	@echo -e $(_finish)
